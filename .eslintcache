[{"/Users/user/Desktop/redux-app/src/App.js":"1","/Users/user/Desktop/redux-app/src/store/configureStore.js":"2","/Users/user/Desktop/redux-app/src/store/bug.js":"3","/Users/user/Desktop/redux-app/src/store/middleware/logger.js":"4"},{"size":2332,"mtime":1611740821108,"results":"5","hashOfConfig":"6"},{"size":559,"mtime":1611743834976,"results":"7","hashOfConfig":"6"},{"size":3447,"mtime":1611740764959,"results":"8","hashOfConfig":"6"},{"size":185,"mtime":1611744359468,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"159q1vu",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/user/Desktop/redux-app/src/App.js",["20","21","22","23","24","25","26"],"import logo from './logo.svg';\nimport './App.css';\nimport {store} from \"./store/configureStore\";\nimport { unsubscribe } from \"./store/configureStore\";\nimport { bugAdded, bugResolved,getUnresolvedBugs, bugAssignedToUser, getBugsByUser } from \"./store/bug\";\nimport { projectAdded } from \"./store/projects\";\nimport { userAdded } from \"./store/users\"\nimport react, { useEffect, useState } from \"react\";\n\nconst addUser = (user) => {\n  store.dispatch(userAdded({name:user}));\n  console.log(store.getState().entities.users);\n}\n\nfunction App() {\n  const [id, setId] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [allbugs, setAllbugs] = useState([]);\n  const [project, setProject] = useState(\"\");\n  const [user, setUser] = useState(\"\")\n  useEffect(() => {\n    setAllbugs(store.getState().entities.bugs);\n  }, [store])\n\n  const unsubscribe = store.subscribe(() => {\n    setAllbugs(store.getState().entities.bugs);\n  })\n\n  const resolveBug = () => {\n    store.dispatch(bugResolved({id:Number(id)}));\n    console.log(getUnresolvedBugs(store.getState()))\n  }\n  const addBug = () => {\n    store.dispatch(bugAdded({description:description}));\n    setAllbugs(store.getState().entities.bugs);\n  }\n  const addProject = () => {\n    store.dispatch(projectAdded({name:project}));\n    console.log(store.getState());\n  }\n\n  //unsubscribe();\n  return (\n    <div className=\"App\">\n\n      <input placeholder=\"enter bug id\" value={id} onChange={(e) => setId(e.target.value)}></input>\n      <button onClick={resolveBug}>\n        Resolve Bug\n      </button>\n\n      <input placeholder=\"enter bug id\" value={description} onChange={(e) => setDescription(e.target.value)}></input>\n      <button onClick={addBug}>\n        Add Bug\n      </button>\n      \n      <input placeholder=\"name\" value={project} onChange={(e) => setProject(e.target.value)}></input>\n      <button onClick={addProject}>\n        Add project\n      </button>\n\n      <input placeholder=\"name\" value={user} onChange={(e) => setUser(e.target.value)}></input>\n      <button onClick={() => addUser(user)}>\n        Add User\n      </button>\n\n      <div>\n        {allbugs.length > 0 ? allbugs.map(bug => (<div key={bug.id}><p>{bug.id}</p><p>{bug.description}</p> <p>{bug.resolved.toString()}</p><hr></hr></div> )) : null}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/user/Desktop/redux-app/src/store/configureStore.js",[],"/Users/user/Desktop/redux-app/src/store/bug.js",["27","28"],"import { createAction, createReducer, createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\n\n//<-------------solution 3------------->\nlet lastId = 0;\nconst slice = createSlice({\n    name: 'bugs',\n    initialState: [],\n    reducers: {\n        //maps actions to action handlers\n        bugAdded: (bugs, action) => {\n            bugs.push({\n                id: ++lastId,\n                description: action.payload.description,\n                resolved: false\n            });\n        },\n        bugResolved: (bugs, action) => {\n            const index = bugs.findIndex(bug => bug.id === action.payload.id);\n            bugs[index].resolved = true;\n        },\n        bugAssignedToUser: (bugs, action) => {\n            const {bugId, userId} = action.payload;\n            const index = bugs.find(bug => bug.id === bugId);\n            bugs[index].userId = userId;\n        }\n\n    }\n})\n\nexport const {bugAdded, bugResolved, bugAssignedToUser} = slice.actions;\nexport default slice.reducer;\n\n//selector function\n//export const getUnresolvedBugs = state => state.entities.bugs.filter(bug => !bug.resolved);\n\n//using memorization to create selector function, that is using cache\nexport const getUnresolvedBugs = createSelector(\n    state => state.entities.bugs,\n    bugs => bugs.filter(bug => !bug.resolved)\n)\nexport const getBugsByUser = userId => createSelector(\n    state => state.entities.bugs,\n    bugs => bugs.filter(bug => bug.userId === userId)\n)\n\n\n\n\n\n//<--------------solution 2------------------------>\n// //Action creators\n// export const bugAdded = createAction(\"bugAdded\");\n// export const bugResolved = createAction(\"bugResolved\");\n// export const bugRemoved = createAction(\"bugRemoved\");  \n\n// let lastId = 0;\n// export default createReducer([],{\n//     //key: value\n//     //actions: function\n//     [bugAdded.type]:(state, action) =>{\n//         state.push({\n//             id: ++lastId,\n//             description: action.payload.description,\n//             resolved: false\n//         });\n//     },\n\n//     [bugResolved.type]: (state, action) => {\n//         const index = state.findIndex(bug => bug.id === action.payload.id);\n//         state[index].resolved = true;\n//     }\n// })\n\n//<-----------solution 1--------------->\n// //Action types\n// const BUG_ADDED = \"bugAdded\";\n// const BUG_REMOVED = \"bugRemoved\"; \n// const BUG_RESOLVED = \"bugResolved\";\n\n// //Action creators\n// export function bugAdded(description) {\n//     return {\n//         type: BUG_ADDED,\n//         payload: {\n//             description\n//         }\n//     }\n// }\n// export const bugResolved = (id) => ({\n//     type: BUG_RESOLVED,\n//     payload: {\n//         id\n//     }\n// })\n\n\n// //Reducers \n// let lastId = 0;\n// export default function reducer(state = [], action) {\n//     switch (action.type) {\n//         case BUG_ADDED.type:\n//         console.log(action.payload)\n//             return [\n//                 ...state,\n//                 {\n//                     id: ++lastId,\n//                     description: action.payload.description,\n//                     resolved: false\n//                 }\n//             ];\n\n//         case BUG_REMOVED.type:\n//             return state.filter(bug => bug.id !== action.payload.id);\n\n//         case BUG_RESOLVED.type:\n//             return state.map(bug => bug.id !== action.payload.id ? bug : { ...bug, resolved: true })\n\n//         default:\n//             return state;\n//     }\n\n// }","/Users/user/Desktop/redux-app/src/store/middleware/logger.js",[],{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":4,"column":10,"nodeType":"31","messageId":"32","endLine":4,"endColumn":21},{"ruleId":"29","severity":1,"message":"34","line":5,"column":51,"nodeType":"31","messageId":"32","endLine":5,"endColumn":68},{"ruleId":"29","severity":1,"message":"35","line":5,"column":70,"nodeType":"31","messageId":"32","endLine":5,"endColumn":83},{"ruleId":"29","severity":1,"message":"36","line":8,"column":8,"nodeType":"31","messageId":"32","endLine":8,"endColumn":13},{"ruleId":"37","severity":1,"message":"38","line":23,"column":6,"nodeType":"39","endLine":23,"endColumn":13,"suggestions":"40"},{"ruleId":"29","severity":1,"message":"41","line":25,"column":9,"nodeType":"31","messageId":"32","endLine":25,"endColumn":20},{"ruleId":"29","severity":1,"message":"42","line":1,"column":10,"nodeType":"31","messageId":"32","endLine":1,"endColumn":22},{"ruleId":"29","severity":1,"message":"43","line":1,"column":24,"nodeType":"31","messageId":"32","endLine":1,"endColumn":37},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'unsubscribe' is defined but never used.","'bugAssignedToUser' is defined but never used.","'getBugsByUser' is defined but never used.","'react' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'store'. Either exclude it or remove the dependency array. Outer scope values like 'store' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["44"],"'unsubscribe' is assigned a value but never used.","'createAction' is defined but never used.","'createReducer' is defined but never used.",{"desc":"45","fix":"46"},"Update the dependencies array to be: []",{"range":"47","text":"48"},[832,839],"[]"]